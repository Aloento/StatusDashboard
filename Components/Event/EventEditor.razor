@using Microsoft.AspNetCore.Components.Authorization
@using StatusDashboard.Helpers
@inherits ComponentBaseWithDb
@inject AuthenticationStateProvider auth;
@inject ILogger<EventEditor> logger;
@inject IJSRuntime JS

<scale-modal
  heading="Edit Event"
  id="@nameof(EventEditor)"
  omit-close-button
  size="small">
  <EditForm class="flex flex-col gap-y-6" Model="form" OnValidSubmit="submit">
    <DataAnnotationsValidator />

    <div>
      <FluentTextField
        AutoComplete="off"
        Autofocus="true"
        @bind-Value="form.Title"
        Class="w-full"
        Label="@nameof(form.Title)"
        Placeholder="Please give the title of event"
        Required="true" />

      <ValidationMessage
        class="text-red-600"
        For="@(() => form.Title)" />
    </div>

    <div>
      <FluentSelect
        @bind-SelectedOption="form.Type"
        Items="@(Enum.GetValues<EventType>().Skip(1))"
        Label="@nameof(form.Type)"
        TOption="EventType" />
    </div>

    @{
      var values = Enum.GetValues<EventStatus>();
      var status =
        form.Type == EventType.Maintenance
          ? values.Skip(4)
          : values.Take(4);
    }

    <div>
      <FluentSelect
        @bind-SelectedOption="form.Status"
        Items="@status"
        Label="@nameof(form.Status)"
        TOption="EventStatus" />
    </div>

    @if (form.Type is EventType.Maintenance)
    {
      <div>
        <FluentDatePicker
          @bind-Value="form.End"
          Label="@($"Plan {nameof(form.End)} CET")"
          Required="true" />

        <FluentTimePicker
          @bind-Value="form.End"
          Required="true" />

        <ValidationMessage
          class="text-red-600"
          For="@(() => form.End)" />
      </div>
    }

    <div>
      <FluentTextArea
        @bind-Value="form.UpdateMsg"
        Class="w-full"
        Label="Update Message"
        Resize="TextAreaResize.Vertical" />

      <ValidationMessage
        class="text-red-600"
        For="@(() => form.UpdateMsg)" />
    </div>
    
    <div class="flex gap-x-3 self-end">
      <FluentButton OnClick="closeModal">
        Cancel
      </FluentButton>
      
      <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">
        Submit
      </FluentButton>
    </div>
  </EditForm>
</scale-modal>

<scale-button onclick="openModal()" size="small">
  <scale-icon-action-edit accessibility-title="edit" />
  Edit
</scale-button>

<script>
  function openModal() {
    document.getElementById("EventEditor").opened = true;
  }

  function closeModal() {
    document.getElementById("EventEditor").opened = false;
  }
</script>
